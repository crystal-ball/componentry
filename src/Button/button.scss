/* componentry/src/Button/button */

//
// Base styles
//

.btn {
  -webkit-appearance: button;
  // Opinionated: add "hand" cursor to non-disabled .btn elements
  cursor: pointer;
  user-select: none;
  display: inline-block;
  margin: 0; // Reset the margin in Firefox and Safari
  padding: $btn-padding-y $btn-padding-x;
  border: $btn-border-width solid transparent;
  font-family: inherit;
  font-size: $font-size-base;
  font-weight: $btn-font-weight;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  line-height: $btn-line-height;
  text-transform: $btn-text-transform;
  letter-spacing: $btn-letter-spacing;
  overflow: visible; // Show the overflow in Edge

  // Manually declare to provide an override to the browser default
  @if $enable-rounded {
    border-radius: $btn-border-radius;
  } @else {
    border-radius: 0;
  }

  @include transition($btn-transition);

  // Share hover and focus styles
  @include hover-focus {
    text-decoration: none;
  }

  &:focus,
  &.focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    cursor: default;
    opacity: $btn-disabled-opacity;
    @include box-shadow(none);
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    background-image: none;
    @include box-shadow($btn-active-box-shadow);

    &:focus {
      @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
    }
  }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}

//
// Theme color variants
//

@mixin button-variant(
  $background,
  $border,
  $hover-background: darken($background, 7.5%),
  $hover-border: darken($border, 10%),
  $active-background: darken($background, 10%),
  $active-border: darken($border, 12.5%)
) {
  color: color-yiq($background);
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  @include hover {
    color: color-yiq($hover-background);
    // If a hover-gradient is provided, it should overlay the regular background
    @if $btn-hover-gradient {
      background-image: $btn-hover-gradient;
      background-blend-mode: overlay;
    } @else {
      @include gradient-bg($hover-background);
    }

    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba($border, 0.5);
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba($border, 0.5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($background);
    background-color: $background;
    border-color: $border;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);

    // If a hover-gradient is provided, it should overlay the regular background
    @if $btn-active-gradient {
      background-image: $btn-active-gradient;
      background-blend-mode: overlay;
    } @else {
      @include gradient-bg($active-background);
    }

    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($border, 0.5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($border, 0.5);
      }
    }
  }
}

@each $color, $value in $theme-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
  }
}

//
// Outline button variants
//

@mixin button-outline-variant(
  $color,
  $color-hover: color-yiq($color),
  $active-background: $color,
  $active-border: $color
) {
  color: $color;
  background-color: transparent;
  background-image: none;
  border-color: $color;

  &:hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow != none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, 0.5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
      }
    }
  }
}

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}

//
// Link buttons
//

// Make a button look and behave like a link
// TODO: the comment from BS doesn't match up with what is shown in BS docs, how is
// a btn-link supposed to be used???
.btn-link {
  font-weight: $font-weight-normal;
  color: $link-color;
  background-color: transparent;

  @include hover {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
    background-color: transparent;
    border-color: transparent;
  }

  &:focus,
  &.focus {
    text-decoration: $link-hover-decoration;
    border-color: transparent;
    box-shadow: none;
  }

  &:disabled,
  &.disabled {
    color: $btn-link-disabled-color;
    pointer-events: none;
  }

  // No need for an active state here
}

//
// Button Sizes
//

@mixin button-size(
  $padding-y,
  $padding-x,
  $font-size,
  $line-height,
  $border-radius,
  $letter-spacing
) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  letter-spacing: $letter-spacing;
  line-height: $line-height;

  // Manually declare to provide an override to the browser default
  @if $enable-rounded {
    border-radius: $border-radius;
  } @else {
    border-radius: 0;
  }
}

.btn-lg {
  @include button-size(
    $btn-padding-y-lg,
    $btn-padding-x-lg,
    $font-size-lg,
    $btn-line-height-lg,
    $btn-border-radius-lg,
    $btn-letter-spacing-lg
  );
}

.btn-sm {
  @include button-size(
    $btn-padding-y-sm,
    $btn-padding-x-sm,
    $font-size-sm,
    $btn-line-height-sm,
    $btn-border-radius-sm,
    $btn-letter-spacing-lg
  );
}

//
// Block button
//

.btn-block {
  display: block;
  width: 100%;

  // Vertically space out multiple block buttons
  + .btn-block {
    margin-top: $btn-block-spacing-y;
  }
}

// Specificity overrides
input[type='submit'],
input[type='reset'],
input[type='button'] {
  &.btn-block {
    width: 100%;
  }
}

//
// Anchor button
//

// The "color='link'" button has the font styles of an anchor ADN all of the
// regular padding of a button. For ðŸ’¯ Accessibility we want to have buttons
// that look exactly like links for in application triggers, `btn-anchor`
// creates a button styled exactly like an anchor. This should be used for
// application actions that are not route navigations.

.btn-anchor {
  // Extend link styles for font styling
  @extend .btn-link;

  // Remove additional button styles for anchor appearance
  -webkit-appearance: none !important; // Remove Chrome native button styling
  border: none;
  border-radius: 0;
  font-family: $font-family-sans-serif;
  line-height: $line-height-base;
  padding: 0;
  user-select: auto;
  vertical-align: baseline;
  white-space: normal;
}
