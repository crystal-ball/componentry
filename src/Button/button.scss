/* componentry/src/Button/button */

//
// Base styles
//

.btn {
  border: $btn-border-width solid transparent;
  @include border-radius($btn-border-radius);
  cursor: pointer; // Opinionated: add pointer to non-disabled .btn elements
  display: inline-block;
  font-size: $font-size-base;
  font-weight: $btn-font-weight;
  letter-spacing: $btn-letter-spacing;
  line-height: $btn-line-height;
  padding: $btn-padding-y $btn-padding-x;
  text-align: center;
  text-transform: $btn-text-transform;
  user-select: none;
  vertical-align: middle;
  white-space: nowrap;

  // ‚ÑπÔ∏è The box-shadow styles remain static throughout hover/active states
  @include box-shadow($btn-box-shadow);

  // $btn-transition default includes color, background-color, border-color
  @include transition($btn-transition);

  &.disabled, // For use with a.btn elements only
  &:disabled {
    cursor: default;
    opacity: $btn-disabled-opacity;
  }
}

//
// Theme color variants
//

@each $color, $value in $theme-colors {
  .btn-#{$color} {
    border-color: $value;
    color: color-yiq($value);
    @include gradient-bg($value);

    &:hover {
      border-color: darken($value, 10%);
      color: color-yiq($value);
      @include gradient-bg(darken($value, 7.5%));

      @include button-hover-styles($value); // Overrides escape hatch
    }

    &:active,
    &.active {
      border-color: darken($value, 12.5%);
      color: color-yiq($value);
      @include gradient-bg(darken($value, 10%));

      @include button-active-styles($value); // Overrides escape hatch
    }

    // Reset any psuedo styles to variant default for disabled
    &.disabled,
    &:disabled {
      border-color: $value;
      color: color-yiq($value);
      @include gradient-bg($value);

      @include button-disabled-styles($value); // Overrides escape hatch
    }
  }
}

//
// Outline button variants
//

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    color: $value;
    background-color: transparent;
    background-image: none;
    border-color: $value;

    &:hover {
      color: color-yiq($value);
      background-color: $value;
      border-color: $value;
      @include gradient-bg($value);

      @include button-outline-hover-styles($value); // Overrides escape hatch
    }

    &:active,
    &.active {
      border-color: $value;
      color: color-yiq($value);
      @include gradient-bg(darken($value, 7.5%));

      @include button-outline-active-styles($value); // Overrides escape hatch
    }

    &.disabled,
    &:disabled {
      color: $value;
      background-color: transparent;

      @include button-outline-disabled-styles($value); // Overrides escape hatch
    }
  }
}

//
// Link buttons
//

// Creates a button that has the text styles of an anchor, but maintains the
// padding of a button, this is useful for adding secondary CTA buttons.
.btn-link {
  background-color: transparent;
  color: $link-color;
  font-weight: $font-weight-normal;

  &:hover {
    background-color: transparent;
    border-color: transparent;
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
  }

  &:disabled,
  &.disabled {
    color: $btn-link-disabled-color;
    pointer-events: none;
  }

  // No need for an active state here
}

//
// Anchor button
//

// The `.btn-link` style button has the font styles of an anchor AND all of the
// regular padding of a button. For üíØ Accessibility we want to have buttons
// that look exactly like links for in application triggers, `btn-anchor`
// creates a button styled exactly like an anchor. This should be used for any
// application actions that are not route navigations.

.btn-anchor {
  @extend .btn-link; // Extend link styles for font styling

  // Remove additional button styles for anchor appearance
  -webkit-appearance: none !important; // Remove Chrome native button styling
  border: none;
  border-radius: 0;
  font-family: $font-family-sans-serif;
  line-height: $line-height-base;
  padding: 0;
  user-select: auto;
  vertical-align: baseline;
  white-space: normal;
}

//
// Button Sizes
//

@mixin button-size(
  $padding-y,
  $padding-x,
  $font-size,
  $line-height,
  $border-radius,
  $letter-spacing
) {
  @include border-radius($border-radius);
  font-size: $font-size;
  letter-spacing: $letter-spacing;
  line-height: $line-height;
  padding: $padding-y $padding-x;
}

.btn-lg {
  @include button-size(
    $btn-padding-y-lg,
    $btn-padding-x-lg,
    $font-size-lg,
    $btn-line-height-lg,
    $btn-border-radius-lg,
    $btn-letter-spacing-lg
  );
}

.btn-sm {
  @include button-size(
    $btn-padding-y-sm,
    $btn-padding-x-sm,
    $font-size-sm,
    $btn-line-height-sm,
    $btn-border-radius-sm,
    $btn-letter-spacing-lg
  );
}

//
// Block button
//

.btn-block {
  display: block;
  width: 100%;

  // Vertically space out multiple block buttons
  // ü§î Do we want to include this as a default library style? It's somewhat
  // opinionated and isn't based on "adding" a class to produce a style...
  + .btn-block {
    margin-top: $btn-block-spacing-y;
  }
}

//
// Disabled button style anchors
//

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}
