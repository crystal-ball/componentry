/* componentry/src/Popover/popover */

// Bootstrap popovers are inserted into the DOM at the end of the body on hover and
// the location is assigned with transforms. Componentry instead sets the popover
// parent container to position relative so that the absolute positioned content
// displays relative to parent. This means that Componentry has custom popover styles
// instead of using Bootstrap's

// Container Element
.popover {
  // Default align content to dead center of trigger, the specific content styles can
  // then easily move to top/left/right/bottom where needed
  align-items: center;
  display: inline-flex; // flex instead of block for easier center alignment of content
  justify-content: center;
  position: relative;

  // Directional styles

  &.top {
    .popover-content-container {
      bottom: 100%;
      justify-content: center;
    }

    .popover-content {
      // Top requires bumping bottom 100% again to compensate for container not having
      // any height
      bottom: 100%;
      margin-bottom: $popover-arrow-width;
    }

    .tip-container {
      top: 100%;
      width: 100%;
    }

    .tip:after {
      bottom: $popover-arrow-width * 0.5;
    }
  }

  &.right {
    .popover-content-container {
      left: 100%;
      align-items: center;
    }

    .popover-content {
      margin-left: $popover-arrow-width;
    }

    .tip-container {
      height: 100%;
      right: 100%;
    }

    .tip:after {
      left: $popover-arrow-width * 0.5;
    }
  }

  &.bottom {
    .popover-content-container {
      top: 100%;
      justify-content: center;
    }

    .popover-content {
      margin-top: $popover-arrow-width;
    }

    .tip-container {
      bottom: 100%;
      width: 100%;
    }

    .tip:after {
      top: $popover-arrow-width * 0.5;
    }
  }

  &.left {
    .popover-content-container {
      right: 100%;
      align-items: center;
    }

    .popover-content {
      margin-right: $popover-arrow-width;
      right: 0;
    }

    .tip-container {
      height: 100%;
      left: 100%;
    }

    .tip:after {
      right: $popover-arrow-width * 0.5;
    }
  }
}

// --- Popover trigger ------------------------------------

.popover-action-primary {
  @include active-trigger-element;
}

// Content container overrides the width constraints for parent element
.popover-content-container {
  width: $popover-max-width;
  position: absolute;
  display: inline-flex;
}

// Content Element - The content element should be used to wrap a body/header element
.popover-content {
  // Reset font properties for consistent font styling regardless of cascading values
  @include reset-text();
  display: block;
  position: absolute;
  max-width: $popover-max-width;
  z-index: $zindex-popover;

  background-clip: padding-box;
  background-color: $popover-bg;
  border: $popover-border-width solid $popover-border-color;
  font-size: $font-size-sm;
  // Allow breaking very long words so they don't overflow the popover's bounds
  word-wrap: break-word;

  box-shadow: box-shadow($popover-box-shadow);
  @include border-radius($border-radius-lg);

  .tip-container {
    align-items: center;
    display: flex;
    justify-content: center;
    overflow: hidden;
    position: absolute;
  }

  // The .tip container creates a containing box of the same height and width as the
  // tip with overflow hidden. Then inside that container we create a square of the
  // same dimensions, and rotate it 45 degrees to create the tip effect
  .tip {
    height: $popover-arrow-width;
    overflow: hidden;
    width: $popover-arrow-width;

    &:after {
      border: $popover-border-width solid $popover-border-color;
      // Do not use box-shadow mixin, output is wrapped in a check against
      // $enable-shadows, but we always want the arrow box-shadow included
      box-shadow: $popover-box-shadow;
      background: $popover-bg;
      content: '';
      height: $popover-arrow-width;
      position: absolute;
      transform: rotate(45deg);
      width: $popover-arrow-width;
    }
  }
}

// Body element should contain popover inner content
.popover-body {
  padding: $popover-body-padding-y $popover-body-padding-x;
  color: $popover-body-color;
}

// --------------------------------------------------------
// Heading element

.popover-heading {
  padding: $popover-header-padding-y $popover-header-padding-x;
  // Try to guarantee that spacing is correct regardless of div vs h* usage
  margin-top: 0;
  margin-bottom: 0;
  font-size: $font-size-base;
  color: $popover-header-color;
  background-color: $popover-header-bg;
  border-bottom: $popover-border-width solid darken($popover-header-bg, 5%);
  $offset-border-width: calc(#{$border-radius-lg} - #{$popover-border-width});
  @include border-top-radius($offset-border-width);

  &:empty {
    display: none;
  }
}
