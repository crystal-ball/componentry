/* componentry/src/Dropdown/dropdown */

// Caret mixin creates :after carets for dropdown trigger
@mixin caret($direction: down) {
  @if $enable-caret {
    &::after {
      display: inline-block;
      width: 0;
      height: 0;
      margin-left: $caret-width * 0.85;
      vertical-align: $caret-width * 0.85;
      content: '';
      @if $direction == down {
        border-top: $caret-width solid;
        border-right: $caret-width solid transparent;
        border-bottom: 0;
        border-left: $caret-width solid transparent;
      } @else if $direction == up {
        border-top: 0;
        border-right: $caret-width solid transparent;
        border-bottom: $caret-width solid;
        border-left: $caret-width solid transparent;
      } @else if $direction == right {
        border-top: $caret-width solid transparent;
        border-right: 0;
        border-bottom: $caret-width solid transparent;
        border-left: $caret-width solid;
      }
    }

    // For left open dropdowns, show a caret before trigger content instead of
    // after
    @if $direction == left {
      &::after {
        display: none;
      }

      &::before {
        display: inline-block;
        width: 0;
        height: 0;
        margin-right: $caret-width * 0.85;
        vertical-align: $caret-width * 0.85;
        content: '';
        border-top: $caret-width solid transparent;
        border-right: $caret-width solid;
        border-bottom: $caret-width solid transparent;
      }
    }

    // For triggers without content, remove margin-right so caret is centered in
    // the trigger
    &:empty::after {
      margin-left: 0;
    }
  }
}

// The dropdown wrapper element handles creating a relative container that the
// content is absolutely positioned off of
.dropdown {
  position: relative;
  // Default dropdown container to inline-block so that click area is constrained
  // to dropdown trigger
  display: inline-block;
}

// The dropdown trigger
.dropdown-toggle {
  .top & {
    @include caret(up);
  }

  .right & {
    @include caret(right);
    &::after {
      vertical-align: 0;
    }
  }

  .bottom & {
    @include caret(down);
  }

  .left & {
    @include caret(left);
    &::before {
      vertical-align: 0;
    }
  }
}

// The dropdown menu
.dropdown-content {
  display: block;
  position: absolute;
  z-index: $zindex-dropdown;
  min-width: $dropdown-min-width;
  padding: $dropdown-padding-y 0;
  font-size: $font-size-base; // Redeclare because nesting can cause inheritance issues
  color: $body-color;
  text-align: left; // Ensures proper alignment if parent has it changed (e.g., modal footer)
  background-color: $dropdown-bg;
  background-clip: padding-box;
  border: $dropdown-border-width solid $dropdown-border-color;
  @include border-radius($dropdown-border-radius);
  @include box-shadow($dropdown-box-shadow);

  // --- Directional styles with parent selector

  .overlay & {
    top: 0;
  }

  .top & {
    top: auto;
    bottom: 100%;
    margin-bottom: $dropdown-spacer;
  }

  .right & {
    top: 0;
    right: auto;
    left: 100%;
    margin-left: $dropdown-spacer;
  }

  .bottom & {
    top: 100%;
    left: 0;
    margin-top: $dropdown-spacer;
  }

  .left & {
    top: 0;
    right: 100%;
    left: auto;
    margin-right: $dropdown-spacer;
  }

  // Class intended to be used with dropdown bottom direction and aligns the menu
  // to the right edge of the trigger instead of the left
  &.dropdown-menu-right {
    right: 0;
    left: auto;
  }
}

//
// Content items, text, headers and dividers
//

// Dropdown items
// `<button>`-specific styles are denoted with `// For <button>s`
// TODO: handle cursors for buttons...
.dropdown-item {
  display: block;
  width: 100%; // For `<button>`s
  padding: $dropdown-item-padding-y $dropdown-item-padding-x;
  font-weight: $font-weight-normal;
  color: $dropdown-link-color;
  text-align: inherit; // For `<button>`s
  line-height: $dropdown-item-line-height;
  white-space: nowrap; // prevent links from randomly breaking onto new lines
  background-color: transparent; // For `<button>`s
  border: 0; // For `<button>`s

  &:hover,
  &:focus {
    color: $dropdown-link-hover-color;
    text-decoration: none;
    @include gradient-bg($dropdown-link-hover-bg);
  }

  &.active,
  &:active {
    color: $dropdown-link-active-color;
    text-decoration: none;
    @include gradient-bg($dropdown-link-active-bg);
  }

  &.disabled {
    color: $dropdown-link-disabled-color;
    background-color: transparent;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }
}

// Dropdown text
.dropdown-item-text {
  display: block;
  padding: $dropdown-item-padding-y $dropdown-item-padding-x;
  color: $dropdown-link-color;
}

// Dropdown section headers
.dropdown-header {
  display: block;
  padding: $dropdown-padding-y $dropdown-item-padding-x;
  margin-bottom: 0; // for use with heading elements
  font-size: $font-size-sm;
  color: $dropdown-header-color;
  white-space: nowrap; // as with > li > a
}

// Dividers (basically an `<hr>`) within the dropdown
.dropdown-divider {
  height: 0;
  margin: $nav-divider-margin-y 0;
  overflow: hidden;
  border-top: 1px solid $dropdown-divider-bg;
}
