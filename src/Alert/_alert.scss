///                                      Componentry <Alert /> styles
/// -----------------------------------------------------------------

$alert: () !default;

$alert-defaults: (
  base: (
    // Make the alert container a flex container by default with space-between
    // to align close button to right side
    display: flex,
    align-items: flex-start,
    justify-content: space-between,
  ),
  // --- VARIANTS
  variants:
    (
      primary: (
        padding: theme-get('spacing.2'),
        border: 1px solid transparent,
        border-radius: theme-get('border-radii.md'),
      ),
    ),
);

// --------------------------------------------------------
// COLORS

$alert-colors: ();
$alert-theme-colors: ('primary', 'info', 'success', 'warning', 'error');
@each $color, $value in $alert-theme-colors {
  $alert-colors: map-assign(
    $alert-colors,
    (
      '.alert-color-#{$color}.alert-primary': (
        background: theme-get('colors.#{$color}.100'),
        border-color: theme-get('colors.#{$color}.300'),
        color: theme-get('colors.#{$color}.500'),
        '& .alert-link': (
          color: theme-get('colors.#{$color}.500'),
          font-weight: theme-get('typography.font-weights.bold'),
        ),
        '& hr': (
          border-top-color: theme-get('colors.#{$color}.400'),
        ),
      ),
    )
  );
}

$alert-defaults: map-assign(
  $alert-defaults,
  (
    colors: $alert-colors,
  )
);

// --------------------------------------------------------
// CLASSES

$alert: map-assign($alert-defaults, $alert);

@include style-rule-from-map(componentry-class(alert), get($alert, 'base'));

@each $variant, $styles in get($alert, 'variants') {
  @include style-rule-from-map('.alert-#{$variant}', $styles);
}

@include style-properties-from-map($alert-colors);

// --------------------------------------------------------
// ELEMENTS

.alert-content {
  flex-grow: 1;
  flex-shrink: 1;
}

.alert-heading {
  color: inherit;
  margin-bottom: theme-get('spacing.2');
}

.ðŸ…²-alert-close {
  flex-shrink: 0;
  margin-left: theme-get('spacing.1');

  // Animate close icon opacity on hover
  .icon-close {
    opacity: 0.6;
    transition: theme-get('transitions.fade');

    &:hover,
    &:focus {
      opacity: 1;
    }
  }
}
