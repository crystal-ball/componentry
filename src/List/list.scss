/* ~componentry/src/List/list */

// --------------------------------------------------------
// Lists (<ul>, <ol>, or <div>)

.list {
  display: flex;
  flex-direction: column;

  // No need to set list-style: none; since .list-item is block level
  padding-left: 0; // reset padding because ul and ol
  margin-bottom: 0;
}

// --------------------------------------------------------
// List items (<li> or <div> within .list)

.list-item {
  position: relative;
  display: block;
  padding: $list-item-padding-y $list-item-padding-x;
  background-color: $list-bg;
  border: $list-border-width solid $list-border-color;

  // For subsequent list item's remove the border top so we don't double up
  & + .list-item {
    border-top: 0;
  }

  &:first-child {
    @include border-top-radius($list-border-radius);
  }

  &:last-child {
    margin-bottom: 0;
    @include border-bottom-radius($list-border-radius);
  }

  &.disabled {
    color: $list-disabled-item-color;
    background-color: $list-disabled-item-bg;
  }
}

// --------------------------------------------------------
// Action list items
//
// Use anchor or button elements instead of `li`s or `div`s to create
// interactive list items. Includes an extra `.active` modifier class for
// selected items.

.list-action-item {
  color: $list-action-item-color;
  font-size: inherit; // -> buttons
  text-align: inherit; // -> buttons
  text-decoration: none; // -> anchors

  // Hover state
  &:hover,
  &:focus {
    z-index: 1; // Place hover/focus items above their siblings for proper border styling
    color: $list-action-item-hover-color;
    background-color: $list-action-item-hover-bg;
    text-decoration: none;
  }

  // Note that the active state is different from having the active class
  // (Class is persistent, state is for user interaction)
  &:active {
    color: $list-action-item-active-color;
    background-color: $list-action-item-active-bg;
  }
}

// --------------------------------------------------------
// Active state modifier

// Must be declared after list-action-item ensure active has precedence
// over :hover (Note this is valid for items and action items)
.list-item.active {
  z-index: 2; // Place active items above their siblings for proper border styling
  color: $list-active-item-color;
  background-color: $list-active-item-bg;
  border-color: $list-active-item-border-color;
}

// --------------------------------------------------------
// Flush layout list item

// Remove borders and border-radius to keep list group items edge-to-edge. Most
// useful within other components (e.g., cards).
.list-flush {
  .list-item {
    border-right: 0;
    border-left: 0;
    @include border-radius(0);
  }

  &:first-child {
    .list-item:first-child {
      border-top: 0;
    }
  }

  &:last-child {
    .list-item:last-child {
      border-bottom: 0;
    }
  }
}

// --------------------------------------------------------
// Contextual variants

// Add modifier classes to change text and background color on individual items.
// (Organizationally, this must come after the `:hover` states)
@each $color, $value in $theme-colors {
  $background: theme-color-level($color, -9);
  $foreground: theme-color-level($color, 6);

  .list-item-#{$color} {
    color: $color;
    background-color: $background;

    &.list-action-item {
      @include hover-focus {
        color: $foreground;
        background-color: darken($background, 5%);
      }

      &.active {
        color: theme-color(background);
        background-color: $foreground;
        border-color: $foreground;
      }
    }
  }
}
