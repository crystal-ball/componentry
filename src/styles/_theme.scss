/**
 *                                 ⚙️ Componentry default theme specification
 * -----------------------------------------------------------------------------
 *
 * Motivations & Guidelines:
 *
 * - Define theme domains in individual maps and compose the final theme using
 *   those maps. This enables users to more easily override shared parts of the
 *   theme and helps highlight which parts of the theme are shared.
 * - Use a naming pattern `<type>-<domain>` for naming maps, eg `theme-shades`,
 *   `border-shades`, `font-sizes`, `font-weights`
 * - Use semantic names or generic names, eg `primary` is a good generic name
 *   and `container` is a good semantic name. This allows users to have useful
 *   defaults with generics and useful fine tuned customizations with semantic
 *   names.
 */

@import './functions/sass';

$palette: () !default;
$headings-base: () !default;
$theme: () !default;

// --------------------------------------------------------
// Palette

$palette: map-assign((
  theme-colors: (primary, success, warning, error),
  // ℹ️ Using gray for this key causes SASS to return null when trying to look
  // up the value (presumably b/c gray is a color)
  grayscale: (
    '100': #eceff1,
    '200': #b0bec5,
    '300': #607d8b,
    '400': #455a64,
    '500': #263238,
  ),
  primary: (
    '100': #d1c4e9,
    '200': #9575cd,
    '300': #673ab7,
    '400': #512da8,
    '500': #311b92,
  ),
  success: (
    '100': #dcedc8,
    '200': #aed581,
    '300': #8bc34a,
    '400': #689f38,
    '500': #33691e,
  ),
  warning: (
    '100': #ffecb3,
    '200': #ffd54f,
    '300': #ffc107,
    '400': #ffa000,
    '500': #ff6f00,
  ),
  error: (
    '100': #ffcdd2,
    '200': #e57373,
    '300': #f44336,
    '400': #d32f2f,
    '500': #b71c1c,
  ),
  typography: (
    body: #1a1a1a,
    code: #ffadc0,
    inverse: #f0f0f0
  ),
  backgrounds: (
    body: #fff
  ),
  borders: (),
  shadows: ()
), $palette);

// --------------------------------------------------------
// Final theme

$font-family-primary: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
  'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
  'Segoe UI Symbol' !default;
$font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
  'Courier New', monospace !default;

/// Theme
$theme: map-assign((
  // --- BREAKPOINTS
  breakpoints: (
    sm: 0,
    md: 768px,
    lg: 1250px,
  ),

  // --- SPACING
  spacing: (
    0: 0,
    xs: 4px,
    sm: 8px,
    md: 16px,
    lg: 24px,
    xl: 48px,
  ),

  // --- PALETTE
  palette: $palette,

  // --- TYPOGRAPHY
  typography: (
    font-families: (
      body: $font-family-primary,
      monospace: $font-family-monospace,
    ),
    font-sizes: (
      sm: 0.875rem,
      lg: 1.25rem,
      // Semantic
      body: 1rem,
      small: 87.5%,
      code: 0.875rem,
    ),
    font-weights: (
      light: 300,
      normal: 400,
      bold: 700,
    ),
    line-heights: (
      single: 1,
      body: 1.5,
    ),
    variants: (
      // --- Heading 1 styles
      heading-1: map-merge((
        font-size: 3rem
      ), $headings-base),

      // --- Heading 2 styles
      heading-2: map-merge((
        font-size: 2rem
      ), $headings-base),

      // --- Heading 3 styles
      heading-3: map-merge((
        font-size: 1.5rem
      ), $headings-base),

      // --- Body styles
      body: (
        font-size: 1rem,

        // Set spacing between multiple paragraphs using sibling selector and
        // margin-top.
        '& + .body': (
          margin-top: 1rem,
        )
      ),
    ),
  ),

  // --- BORDERS
  borders:(
    default: 1px solid get($palette, 'grayscale.300'),
  ),
  border-widths: (),
  border-radii: (
    sm: 2px,
    default: 2px,
    lg: 4px
  ),

  // --- SHADOWS
  shadows: (
    default: 0 0.5rem 1rem rgba(73, 80, 87, 0.15)
  )
), $theme);

// --------------------------------------------------------
// Theme functions

/// Convenience function for accessing a theme value by period delimited path
/// @param {string} $path Path to theme value
/// @return {*} Theme value at path
@function theme-get($path) {
  @return get($theme, $path);
}

// --------------------------------------------------------
// 3.0 Variables

