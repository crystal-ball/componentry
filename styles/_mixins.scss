/* ~componentry/styles/_mixins.scss */

// --------------------------------------------------------
// Map utilities

/// Converts a map into a set of style rules, recursively creates rules for
/// any properties that contain maps
/// @param {Map} $map
@mixin style-properties-from-map($map) {
  @each $property, $value in $map {
    @if (type-of($value) != map) {
      #{$property}: #{$value};
    } @else {
      #{$property} {
        @include style-properties-from-map($value);
      }
    }
  }
}

/// Converts a map into a style rule for the passed selector with map contents
/// for rule properties. Nested maps are recursively converted into nested style
/// rules.
/// @param {string} $selector
/// @param {Map} $map
@mixin style-rule-from-map($selector, $map) {
  #{$selector} {
    @include style-properties-from-map($map);
  }
}

// --------------------------------------------------------
// Breakpoints

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: theme-get('screens')) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: theme-get('screens')) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: theme-get('screens')) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: theme-get('screens')) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// --------------------------------------------------------
// Border radius

@mixin border-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-radius: $radius;
  }
}

@mixin border-top-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  }
}

@mixin border-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  }
}

@mixin border-bottom-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

@mixin border-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

// --------------------------------------------------------
// Hover/Focus/Active states

@mixin hover {
  &:hover {
    @content;
  }
}

@mixin hover-focus {
  &:hover,
  &:focus {
    @content;
  }
}

@mixin hover-focus-active {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

// --------------------------------------------------------
// Typography

/** Resets text to baseline */
@mixin reset-text {
  font-family: $font-family-base;
  // We deliberately do NOT reset font-size or word-wrap.
  font-style: normal;
  font-weight: $font-weight-normal;
  line-height: $line-height-base;
  text-align: left; // Fallback for where `start` is not supported
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
}

// --------------------------------------------------------
// Action elements

/** Resets button and anchor styles to baseline */
@mixin reset-button {
  -webkit-appearance: none !important; // Remove Chrome native button styling
  display: inline; // Match browser agent display for <a>
  padding: 0; // Remove browser agent padding

  // Reset button font styles
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
  letter-spacing: inherit;
  text-align: inherit;
  text-transform: none;

  white-space: normal; // Reset .btn white space

  // TODO: is there a way to make it so that selecting button text doesn't show
  // cursor pointer the same that way that selecting anchor text works?
  user-select: auto;

  // Reset button borders and background
  background-color: transparent;
  border: none;
  border-radius: 0;
}

// Creates default styles for all the active action components to look like
// links
@mixin active-action-element {
  @include reset-button;

  // Set link font styles
  color: theme-get('colors.primary.500');
  cursor: pointer;

  &:hover,
  &.hover {
    color: theme-get('colors.primary.700');
    // text-decoration: $anchor-hover-decoration;
  }

  &:active,
  &.active {
    color: theme-get('colors.primary.900');
    // text-decoration: $anchor-active-decoration;
  }

  &.disabled {
    color: theme-get('colors.primary.300');
    // text-decoration: $anchor-disabled-decoration;
  }
}

// --------------------------------------------------------
// Transitions

@mixin transition($transition...) {
  @if $enable-transitions {
    @if length($transition) == 0 {
      transition: $transition-base;
    } @else {
      transition: $transition;
    }
  }

  @media screen and (prefers-reduced-motion: reduce) {
    transition: none;
  }
}
